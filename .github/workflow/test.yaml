name: CI Internal
on:
  pull_request:
    branches:
      - main
    paths:
      - 'data/**'
jobs:
  kafkacluster-api:
    runs-on: ubuntu-20.04
    name: validation
    steps:
        - name: 'Checkout source code'
          uses: actions/checkout@v2
          with:
             fetch-depth: 0
        - name: validation
          id: files
          run: |
 
            RED='\033[0;31m'
            GREEN='\033[0;32m'
            ORANGE='\033[0;33m'
            
            FILES=$(git diff --name-only HEAD HEAD~1)

            echo -e " ${ORANGE} Starting Validation "
            for FILE in $FILES; do

              echo $FILE | grep -E "tenant" 2>&1 && flag=1 || flag=0
              echo "flag = $flag"
              if [ $flag == 1 ]
              then 
                echo -e "${ORANGE} Validation for tenant.yaml file"
                continue
              fi

              module=$(echo $FILE | cut -d '/' -f 5)
              echo "module is $module"

              P_KEY=$(echo $FILE | cut -d '/' -f 3)
              echo "p_key is $P_KEY"

              env=$(echo $FILE | cut -d '/' -f 4)
              echo "env is $env"

              envArray=("cdt" "pp" "prod")
              if [[ ! "${envArray[*]}" =~ "$env" ]]
              then 
                  echo -e "${RED} Environment Name should be one of cdt, pp, prod. Please correct the environment name in path data/shared/ "
                  exit 1
              fi

              c_type=$(echo $FILE | cut -d '/' -f 2)
              echo "c_type is $c_type"

                if [ "$module" = "user" ] || [ "$module" = "topic" ] || [ "$module" = "cluster" ] || [ "$module" = "schemaregistry" ]
                then

                    env_check=$(echo $FILE | cut -d '/' -f 6 | cut -d '-' -f 1)
                    echo "env_check is $env_check"
                    reg_check=$(echo $FILE | cut -d '/' -f 6 | cut -d '-' -f 2,3)
                    echo "reg_check is $reg_check"
                    cluster_check=$(echo $FILE | cut -d '/' -f 6 | cut -d '-' -f 2,3)
                    echo "cluster_check is $cluster_check"
                    
                    cluster_name=$(jq -r .k8sclustername ${GITHUB_WORKSPACE}/$FILE)
                    echo "cluster_name is $cluster_name"
                    c_name=$(echo $cluster_name | rev | cut -d '-' -f 1,2  | rev )
                    echo "c_name is $c_name"

                    reg_name=$(jq -r .region ${GITHUB_WORKSPACE}/$FILE)
                    echo "reg_name is $reg_name"
                    module_name=$(echo $FILE | rev | cut -d '-' -f 1 | cut -d '.' -f 2 | rev)
                    echo  "module_name is $module_name"

                    user_name=$(jq -r .username ${GITHUB_WORKSPACE}/$FILE)
                    echo "user_name is $user_name"
                    user_env_name=$(echo $user_name | cut -d '.' -f 1)
                    echo "user_env_name is $user_env_name"
                  
                    if [ $env_check != $env ]
                    then
                      echo -e "${RED} EnvironmentName is mentioned wrong in FileName for $FILE"
                      exit 1
                    elif [ $reg_check != $reg_name ]
                    then
                      echo -e "${RED} Region Name is not maching with Region mentioned in FileName for $FILE"
                      exit 1
                    elif [ $c_name != $reg_check ]
                    then
                      echo -e "${RED} K8s Cluster Name is not maching with Region in FileName for $FILE"
                      exit 1
                    elif [ $module_name != $module ]
                    then
                      echo -e "${RED} Mismatch placement of files in folder or wrong naming convention for $FILE "
                      exit 1
                    fi
                fi

                if [ "$module" = "user" ] 
                then 
                  if [ $user_env_name != $env ]
                  then
                    echo -e "${RED} Environment name in user name of $FILE is not matching with folder where file is placed"
                    exit 1
                  fi
                fi

                if [ "$env" = "cdt" ] && [ "$c_type" = "shared" ] && [ "$reg_check" = "west-2" ]
                then
                  k8scluster="emp-cdt-west-2"
                elif [ "$env" = "cdt" ] && [ "$c_type" = "shared" ] && [ "$reg_check" = "north-1" ]
                then
                  k8scluster="emp-cdt-north-1"
                elif [ "$env" = "cdt" ] && [ "$c_type" = "shared" ] && [ "$reg_check" = "west-1" ]
                then
                  k8scluster="emp-cdt-west-1"
                elif [ "$env" = "pp" ] && [ "$c_type" = "shared" ] && [ "$reg_check" = "west-2" ]
                then
                  k8scluster="emp-shared-pp-west-2"
                elif [ "$env" = "pp" ] && [ "$c_type" = "shared" ] && [ "$reg_check" = "north-1" ]
                then
                  k8scluster="emp-shared-pp-north-1"
                elif [ "$env" = "pp" ] && [ "$c_type" = "shared" ] && [ "$reg_check" = "west-1" ]
                then
                  k8scluster="emp-shared-pp-west-1"
                elif [ "$env" = "prod" ] && [ "$c_type" = "shared" ] && [ "$reg_check" = "west-2" ]
                then
                  k8scluster="emp-shared-prod-west-2"
                elif [ "$env" = "prod" ] && [ "$c_type" = "shared" ] && [ "$reg_check" = "north-1" ]
                then
                  k8scluster="emp-shared-prod-north-1"
                elif [ "$env" = "prod" ] && [ "$c_type" = "shared" ] && [ "$reg_check" = "west-1" ]
                then
                  k8scluster="emp-shared-prod-west-1"
                fi

                echo "kubernetes cluster should be $k8scluster"
                if [ $k8scluster != $cluster_name ]
                  then
                    echo -e "${RED} k8sclustername is mentioned wrong in accordance with environment"
                    exit 1
                fi

                if [ "$module" = "cluster" ]
                then 
                  PRODUCT="kafkaapi"
                elif [ "$module" = "topic" ]
                then
                  PRODUCT="kafkatopicapi"
                elif [ "$module" = "user" ]
                then
                  PRODUCT="kafkauserapi"
                elif [ "$module" = "schemaregistry" ]
                then
                  PRODUCT="schemaregistryapi"
                elif [ "$module" = "mirrormaker" ]
                then
                  PRODUCT="madebysai-mmapi"
                fi

              response=$(curl -s -X POST -H "Content-Type: application/json" "https://emp-v3-$env-api-server.maersk-digital.net/v1/${PRODUCT}?productkey=${P_KEY}&validateOnly=true&gituri=${{ secrets.GIT_URI }}&validatoruri=${{ secrets.VALIDATOR_URI }}&cid=${{ secrets.C_ID }}&csec=${{ secrets.C_SECRET }}&clustertype=${c_type}&env=${env}" --data-binary '@'${GITHUB_WORKSPACE}'/'$FILE'' -k | jq '.')
              echo $response
              status=$( jq -r  '.Validated' <<< "${response}" )
              
              if [ "$status" = "false" ]
              then 
                message=$( jq -r  '.Messages' <<< "${response}" )
                for i in "${message[@]}"; do
                  echo -e " ${RED} Validation Failed for $FILE, Please find Error Highlighted "
                  echo -e "${RED} Error: $i"
                done
                exit 1
              else 
                echo -e "${GREEN} Validation is successful for $FILE"
              fi
              
              if [ "$module" = "mirrormaker" ] && [ "`jq .bidirectional_replication_enabled ${GITHUB_WORKSPACE}/$FILE`" == "true" ]
              then 
                echo "Setting up Secondary to Primary replication"
                response1=$(curl -s -X POST -H "Content-Type: application/json" "https:/emp-v3-cdt-api-server.maersk-digital.net/v1/${PRODUCT}?productkey=${P_KEY}&validateOnly=true&gituri=${{ secrets.GIT_URI }}&validatoruri=${{ secrets.VALIDATOR_URI }}&cid=${{ secrets.C_ID }}&csec=${{ secrets.C_SECRET }}&clustertype=${c_type}&env=${env}&replication=secondarytoprimary" --data-binary '@'${GITHUB_WORKSPACE}'/'$FILE'' -k | jq '.')
                status1=$( jq -r  '.Validated' <<< "${response1}" )
                
                if [ "$status1" = "false" ]
                then 
                  message1=$( jq -r  '.Messages' <<< "${response1}" )
                  for i in "${message1[@]}"; do
                    echo -e " ${RED} Validation Failed for $FILE, Please find Error Highlighted "
                    echo -e "${RED} Error: $i"
                  done
                  exit 1
                else 
                  echo -e "${GREEN} Validation is successful for $FILE"
                fi
              fi

              if [ "`jq .delete ${GITHUB_WORKSPACE}/$FILE`" == "true" ]
              then 
                ls -al ${GITHUB_WORKSPACE}
              fi
            done

            
